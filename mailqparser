#!/usr/bin/env python


'''A tool for parsing the output of mailq/postqueue -p/sendmail -bp'''


from __future__ import with_statement
from datetime import datetime
import argparse
import re
import sys
import time


def multiline_split(iterator, pattern='^$'):
    '''Splits multiline text based on a provided regex and returns the
    result as a generator. When reading from stdin, this turns out to be much
    more efficient than doing something like this:

    re.split('^$', text, re.MULTILINE)
    '''
    block = ''
    regex = re.compile(pattern)
    while True:
        try:
            line = iterator.next()
            if regex.match(line):
                if len(block) > 0:
                    yield block
                block = ''
            else:
                block += line
        except StopIteration:
            yield block
            break


def parse_blocks(blocks):
    '''Parses entries in the mailq and returns the postfix id, sender,
    and recipient of the message
    '''
    regex = re.compile(r"""
        (?P<id>[A-Z0-9]+)                 # mail queue id
        \*?                               # asterisk if message is in the active queue
        \s+
        (?P<size>\d+)                     # message size
        \s+
        (?P<date>\w{3}\s\w{3}\s+\d{1,2})  # date stamp (e.g. Sat Mar 14)
        \s
        (?P<stamp>\d\d:\d\d:\d\d)         # timestamp (e.g. 10:12:28)
        \s+
        (?P<sender>.*)                    # sender
    """, re.VERBOSE)
    head_pattern = re.compile(r"""-Queue ID- --Size-- ----Arrival Time---- -Sender/Recipient-------""")
    head_seen = False
    for block in blocks:
        mailq_item = {}
        data = block.strip('\n').split('\n')
        if not head_seen and head_pattern.match(data[0]):
            data = data[1:]
            head_seen = True
        header = regex.match(data[0])
        if not header:
            continue
        mailq_item['id'] = header.group('id')
        mailq_item['size'] = header.group('size')
        mailq_item['from'] = header.group('sender')
        mailq_item['datestring'] = ' '.join((header.group('date'), header.group('stamp')))
        mailq_item['to'] = []
        for line in data[1:]:
            line = line.strip()
            # Each entry in the mail queue may or may not have an error or
            # reason it's deferred. This is always in parens
            if line.startswith('(') and line.endswith(')'):
                mailq_item['error'] = line
            else:
                mailq_item['to'].append(line)
        yield mailq_item


def parse_date(datestring):
    '''Returns a datetime object given a datestring of format %a %b %d %H:%M:%S'''
    today = datetime.now()
    this_year = ' '.join((datestring, str(today.year)))
    last_year = ' '.join((datestring, str(today.year - 1)))
    if datetime.strptime(this_year, '%c') < today:
        return datetime.strptime(this_year, '%c')
    else:
        return datetime.strptime(last_year, '%c')


def read_pattern_file(fname):
    '''Reads a file and returns a regex object'''
    with open(fname, 'r') as fp:
        pattern = '|'.join(line.strip() for line in fp)
        pattern = pattern.strip('|\n\t ')
        if pattern == '':
            show_error("ERROR: Empty pattern file specified.", exit=True)
        return re.compile(pattern)


def pattern_match(regex, queue_item, mode='any', inverse=False):
    '''Given a regex and a queue_item (a dict), returns True or False based on
    if the messages sender/recipients match the regex.

    Kwargs
        mode: choices ['any', 'from', 'to']. Match on both the
              sender/recipient or just one of the two
        inverse: if True, return True only if there is no match
    '''
    sender_match = bool(regex.search(queue_item['from']))
    recipient_match = any(map(regex.search, queue_item['to']))

    if mode == 'from':
        found_match = sender_match
    elif mode == 'to':
        found_match = recipient_match
    else:
        found_match = sender_match or recipient_match

    return found_match ^ inverse


def timefilter_spec(t):
    '''Ensures a user-specified time filter is valid and returns the total
     time in seconds'''
    regex = re.compile('^\d+[MmHhDdSs]$')
    if not regex.match(t):
        msg = '"{}" is not a valid time filter spec'.format(t)
        raise argparse.ArgumentTypeError(msg)

    num, units = int(t[:-1]), t[-1].lower()

    if units == 'm':
        num = num * 60
    elif units == 'h':
        num = num * 60 * 60
    elif units == 'd':
        num = num * 60 * 60 * 24

    return num


def time_match(mailq_item, time_filter, now, mode='newer'):
    '''Determines if a given item matches the user's time filter'''

    mqdate = parse_date(mailq_item['datestring'])
    delta = now - mqdate

    age = (delta.days * 60 * 60 * 24) + delta.seconds
    if mode == 'newer':
        return age < time_filter
    else:
        return age > time_filter


def format_output(mailq_item, delim, format_string):
    '''Helper function for formatting data in a mailq_item dict'''

    def fmt(item):
        val = mailq_item.get(item, '')
        val = ','.join(val) if isinstance(val, list) else val
        return val

    data = map(fmt, format_string.split(','))
    return delim.join(data)


def show_error(msg, exit=False):
    '''Utility function that prints a message to stderr and sleeps for a short
    duration to give the user a chance to see the message before they're
    blasted with the wall of text that is mailqparser's output (also giving
    them time to Ctrl+C out.

    Kwargs:
        exit: If true, we'll just exit(1) instead of sleeping'''

    sys.stderr.write(msg + '\n')
    if exit: sys.exit(1)
    try:
        time.sleep(2)
    except KeyboardInterrupt:
        sys.exit(1)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        usage='%(prog)s [OPTIONS]'
    )
    parser.add_argument(
        '-p', '--print-format',
        dest='print_format',
        default='id,from,to',
        help='''Comma-delimited list of output fields and order. Fields \
available: id, from, to, datestring, size, error. Default is "id,from,to"''',
    )
    parser.add_argument(
        '-d', '--delim',
        dest='delim',
        default=';',
        help='Output field separator to use (default is a semicolon)'
    )
    parser.add_argument(
        '-n', '--newer-than',
        dest='newer_than',
        type=timefilter_spec,
        help='Filter messages newer than... (e.g. "-n 1d" or "-n 40m")'
    )
    parser.add_argument(
        '-o', '--older-than',
        dest='older_than',
        type=timefilter_spec,
        help='Filter messages older than... (e.g. "-n 1d" or "-n 40m")'
    )
    parser.add_argument(
        '-v',
        dest='inverse',
        action='store_true',
        default=False,
        help='Invert the match (like "grep -v")',
    )
    parser.add_argument(
        '-m', '--match',
        dest='match',
        choices=['any', 'from', 'to'],
        default='any',
        help='Match against sender or recipient (default any)'
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '-f', '--file',
        dest='pattern_file',
        help='Filename to use for patterns',
    )
    group.add_argument(
        '-r', '--regex',
        dest='pattern',
        help='Regular expression to match queue items against'
    )


    args = parser.parse_args()

    if args.pattern_file:
        try:
            regex = read_pattern_file(args.pattern_file)
        except IOError:
            msg = '''You dingus, your pattern file ({0}) does not exist or \
isn't readable'''.format(args.pattern_file)
            show_error(msg, exit=True)
    elif args.pattern:
        if args.pattern.endswith('|') or args.pattern.startswith('|'):
            args.pattern = args.pattern.strip('|')
            warning = '''WARNING: Leading or trailing pipe character spotted \
and removed. Are you sure you typed your pattern in correctly?'''
            show_error(warning)
        regex = re.compile(args.pattern)
    else:
        regex = None

    stdin_lines = (line for line in sys.stdin)
    split_data = multiline_split(stdin_lines)
    parsed = parse_blocks(split_data)
    filtered = parsed
    if regex:
        filtered = (q for q in filtered if pattern_match(regex, q,
                                                         mode=args.match,
                                                         inverse=args.inverse))
    if args.newer_than:
        now = datetime.now()
        filtered = (q for q in filtered if time_match(q,
                                                      args.newer_than,
                                                      now, mode='newer'))
    if args.older_than:
        now = datetime.now()
        filtered = (q for q in filtered if time_match(q,
                                                      args.older_than,
                                                      now, mode='older'))

    # A try-except block is necessary here in order to handle ctrl-c or a pipe
    # closure when we pipe stdout to another script/tool
    try:
        for mailq in filtered:
            outstring = format_output(mailq, args.delim, args.print_format)
            sys.stdout.write(outstring + '\n')
    except (IOError, KeyboardInterrupt):
        sys.exit(0)
